#!/usr/bin/env node

/**
 * Test script ƒë·ªÉ ki·ªÉm tra 14 qu·ªπ ƒë·∫ßu t∆∞ v√† h√¨nh ·∫£nh
 */

import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';
import { investmentFunds } from '../shared/schema.js';

async function testFundsAndImages() {
  try {
    console.log('üîç Ki·ªÉm tra database v√† qu·ªπ ƒë·∫ßu t∆∞...');
    
    // K·∫øt n·ªëi database
    const sql = neon(process.env.DATABASE_URL || '');
    const db = drizzle(sql);
    
    // L·∫•y t·∫•t c·∫£ qu·ªπ ƒë·∫ßu t∆∞
    const funds = await db.select().from(investmentFunds);
    
    console.log(`\nüìä T√¨m th·∫•y ${funds.length} qu·ªπ ƒë·∫ßu t∆∞ trong database:`);
    console.log('=' .repeat(80));
    
    funds.forEach((fund, index) => {
      console.log(`${index + 1}. ${fund.name}`);
      console.log(`   M√£ qu·ªπ: ${fund.code}`);
      console.log(`   L√£i su·∫•t: ${fund.dailyReturn}% / ng√†y`);
      console.log(`   Th·ªùi gian: ${fund.duration} ng√†y`);
      console.log(`   ƒê·∫ßu t∆∞ t·ªëi thi·ªÉu: ${fund.minInvestment}`);
      console.log(`   Quy m√¥: ${fund.projectScale}`);
      console.log(`   Ti·∫øn ƒë·ªô: ${fund.progress}%`);
      console.log(`   Danh m·ª•c: ${fund.category}`);
      console.log(`   H√¨nh ·∫£nh: ${fund.image}`);
      console.log(`   T√≠nh nƒÉng: ${fund.features ? fund.features.join(', ') : 'Kh√¥ng c√≥'}`);
      console.log('-' .repeat(80));
    });
    
    console.log(`\n‚úÖ T·ªïng c·ªông: ${funds.length} qu·ªπ ƒë·∫ßu t∆∞`);
    
    if (funds.length >= 14) {
      console.log('üéâ ƒê√£ c√≥ ƒë·ªß 14 qu·ªπ ƒë·∫ßu t∆∞!');
    } else {
      console.log(`‚ö†Ô∏è  Ch·ªâ c√≥ ${funds.length} qu·ªπ, c·∫ßn th√™m ${14 - funds.length} qu·ªπ n·ªØa`);
    }
    
    // Ki·ªÉm tra h√¨nh ·∫£nh
    console.log('\nüñºÔ∏è  Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh:');
    console.log('=' .repeat(80));
    
    const imagePaths = [...new Set(funds.map(fund => fund.image))];
    imagePaths.forEach((imagePath, index) => {
      console.log(`${index + 1}. ${imagePath}`);
    });
    
    console.log(`\nT·ªïng c·ªông ${imagePaths.length} h√¨nh ·∫£nh unique ƒë∆∞·ª£c s·ª≠ d·ª•ng`);
    
    // Ki·ªÉm tra theo danh m·ª•c
    console.log('\nüìÇ Ph√¢n lo·∫°i theo danh m·ª•c:');
    console.log('=' .repeat(80));
    
    const categories = {};
    funds.forEach(fund => {
      if (!categories[fund.category]) {
        categories[fund.category] = [];
      }
      categories[fund.category].push(fund.name);
    });
    
    Object.entries(categories).forEach(([category, fundNames]) => {
      console.log(`${category}: ${fundNames.length} qu·ªπ`);
      fundNames.forEach(name => {
        console.log(`  - ${name}`);
      });
    });
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra:', error);
  }
}

// Ch·∫°y test
testFundsAndImages();
