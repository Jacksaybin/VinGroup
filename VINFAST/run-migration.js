// Script ƒë·ªÉ ch·∫°y migration SQL cho database
import { neon } from '@neondatabase/serverless';
import { readFileSync } from 'fs';
import path from 'path';

const databaseUrl = process.env.DATABASE_URL || 'postgresql://neondb_owner:1OgbCj9n7KS7@ep-dry-snow-a5hfhbqy.us-east-2.aws.neon.tech/neondb?sslmode=require';

async function runSQLMigration() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu ch·∫°y migration SQL...');
    
    const sql = neon(databaseUrl);
    
    // ƒê·ªçc file SQL migration
    const migrationPath = path.join(process.cwd(), 'migrations', '001_initial_setup.sql');
    const migrationSQL = readFileSync(migrationPath, 'utf8');
    
    console.log('üìÑ ƒê√£ ƒë·ªçc file migration SQL th√†nh c√¥ng');
    console.log('üìä K√≠ch th∆∞·ªõc file:', migrationSQL.length, 'k√Ω t·ª±');
    
    // Chia nh·ªè SQL th√†nh c√°c statements ri√™ng bi·ªát
    const statements = migrationSQL
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));
    
    console.log('üî¢ T·ªïng s·ªë statements:', statements.length);
    
    // Ch·∫°y t·ª´ng statement m·ªôt c√°ch tu·∫ßn t·ª±
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i];
      if (statement.trim()) {
        try {
          console.log(`‚ö° Ch·∫°y statement ${i + 1}/${statements.length}...`);
          
          // Ki·ªÉm tra lo·∫°i statement
          if (statement.includes('CREATE EXTENSION')) {
            console.log('   üì¶ T·∫°o extension...');
          } else if (statement.includes('CREATE TABLE')) {
            const tableName = statement.match(/CREATE TABLE.*?"(\w+)"/)?.[1] || 'unknown';
            console.log(`   üóÉÔ∏è  T·∫°o table: ${tableName}`);
          } else if (statement.includes('ALTER TABLE')) {
            console.log('   üîó Th√™m foreign key constraints...');
          } else if (statement.includes('INSERT INTO')) {
            const tableName = statement.match(/INSERT INTO.*?"(\w+)"/)?.[1] || 'unknown';
            console.log(`   üìù Insert d·ªØ li·ªáu v√†o: ${tableName}`);
          }
          
          await sql(statement);
          console.log(`   ‚úÖ Th√†nh c√¥ng!`);
        } catch (error) {
          console.log(`   ‚ö†Ô∏è  Statement ƒë√£ t·ªìn t·∫°i ho·∫∑c l·ªói nh·ªè: ${error.message}`);
          // Ti·∫øp t·ª•c v·ªõi statement ti·∫øp theo
        }
      }
    }
    
    console.log('üéâ Migration SQL ho√†n th√†nh!');
    
    // Ki·ªÉm tra k·∫øt qu·∫£
    console.log('\nüìä Ki·ªÉm tra k·∫øt qu·∫£ migration:');
    
    const userCount = await sql`SELECT COUNT(*) as count FROM users`;
    console.log(`üë• S·ªë l∆∞·ª£ng users: ${userCount[0].count}`);
    
    const fundCount = await sql`SELECT COUNT(*) as count FROM investment_funds`;
    console.log(`üí∞ S·ªë l∆∞·ª£ng investment funds: ${fundCount[0].count}`);
    
    const investmentCount = await sql`SELECT COUNT(*) as count FROM investments`;
    console.log(`üìà S·ªë l∆∞·ª£ng investments: ${investmentCount[0].count}`);
    
    // Hi·ªÉn th·ªã danh s√°ch funds
    console.log('\nüí∞ Danh s√°ch Investment Funds:');
    const funds = await sql`SELECT code, name, daily_return, duration FROM investment_funds ORDER BY code`;
    funds.forEach(fund => {
      console.log(`   ${fund.code}: ${fund.name} - ${(fund.daily_return * 100).toFixed(3)}%/ng√†y (${fund.duration} ng√†y)`);
    });
    
    console.log('\n‚úÖ Database ƒë√£ s·∫µn s√†ng cho VinFast V-Green Platform!');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ch·∫°y migration:', error.message);
    console.error('Chi ti·∫øt l·ªói:', error);
  }
}

runSQLMigration();
