// Database migration script to create tables
import { neon } from '@neondatabase/serverless';

const databaseUrl = process.env.DATABASE_URL || 'postgresql://neondb_owner:1OgbCj9n7KS7@ep-dry-snow-a5hfhbqy.us-east-2.aws.neon.tech/neondb?sslmode=require';

async function runMigrations() {
  try {
    console.log('üöÄ Starting database migrations...');
    
    const sql = neon(databaseUrl);
    
    // Create users table
    await sql`
      CREATE TABLE IF NOT EXISTS users (
        id TEXT PRIMARY KEY,
        username TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;
    console.log('‚úÖ Users table created/verified');
    
    // Create investment_funds table
    await sql`
      CREATE TABLE IF NOT EXISTS investment_funds (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        code TEXT UNIQUE NOT NULL,
        description TEXT,
        category TEXT NOT NULL,
        min_investment TEXT NOT NULL,
        daily_return TEXT NOT NULL,
        duration INTEGER NOT NULL,
        progress INTEGER DEFAULT 0,
        project_scale TEXT,
        features TEXT[],
        image_url TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;
    console.log('‚úÖ Investment funds table created/verified');
    
    // Create investments table
    await sql`
      CREATE TABLE IF NOT EXISTS investments (
        id TEXT PRIMARY KEY,
        user_id TEXT REFERENCES users(id) ON DELETE CASCADE,
        fund_id TEXT REFERENCES investment_funds(id) ON DELETE CASCADE,
        amount TEXT NOT NULL,
        expected_return TEXT,
        status TEXT DEFAULT 'active',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;
    console.log('‚úÖ Investments table created/verified');
    
    // Insert sample user (if not exists)
    const existingUsers = await sql`SELECT COUNT(*) as count FROM users`;
    if (parseInt(existingUsers[0].count) === 0) {
      await sql`
        INSERT INTO users (id, username, email, password) 
        VALUES ('user1', 'demo_user', 'demo@vinfast.com', 'hashed_password_123')
      `;
      console.log('‚úÖ Demo user created');
    }
    
    // Insert sample investment funds (if not exists)
    const existingFunds = await sql`SELECT COUNT(*) as count FROM investment_funds`;
    if (parseInt(existingFunds[0].count) === 0) {
      const sampleFunds = [
        {
          id: 'fund1',
          name: 'Qu·ªπ Ph√°t Tri·ªÉn Tr·∫°m S·∫°c VinFast DC 150kW',
          code: 'VIC-DC150',
          description: 'ƒê·∫ßu t∆∞ v√†o h·ªá th·ªëng tr·∫°m s·∫°c nhanh c√¥ng su·∫•t cao cho xe ƒëi·ªán VinFast',
          category: 'H·∫° t·∫ßng s·∫°c',
          minInvestment: '10,000,000ƒë',
          dailyReturn: '0.001',
          duration: 365,
          progress: 75,
          projectScale: '500 t·ª∑ VND',
          features: ['C√¥ng ngh·ªá s·∫°c nhanh DC 150kW', 'T√≠ch h·ª£p thanh to√°n s·ªë', 'H·ªó tr·ª£ nhi·ªÅu lo·∫°i xe ƒëi·ªán', 'B·∫£o tr√¨ 24/7']
        },
        {
          id: 'fund2', 
          name: 'Qu·ªπ Ph√°t Tri·ªÉn C√¥ng Ngh·ªá 3D VinFast',
          code: 'VIC-3D300',
          description: 'ƒê·∫ßu t∆∞ nghi√™n c·ª©u v√† ph√°t tri·ªÉn c√¥ng ngh·ªá in 3D cho s·∫£n xu·∫•t linh ki·ªán √¥ t√¥',
          category: 'C√¥ng ngh·ªá 3D',
          minInvestment: '50,000,000ƒë',
          dailyReturn: '0.0015',
          duration: 730,
          progress: 45,
          projectScale: '1,200 t·ª∑ VND',
          features: ['C√¥ng ngh·ªá in 3D ti√™n ti·∫øn', 'S·∫£n xu·∫•t linh ki·ªán ch√≠nh x√°c cao', 'Gi·∫£m chi ph√≠ s·∫£n xu·∫•t', 'TƒÉng t·ªëc ƒë·ªô ph√°t tri·ªÉn s·∫£n ph·∫©m']
        }
      ];
      
      for (const fund of sampleFunds) {
        await sql`
          INSERT INTO investment_funds (
            id, name, code, description, category, min_investment, 
            daily_return, duration, progress, project_scale, features
          ) VALUES (
            ${fund.id}, ${fund.name}, ${fund.code}, ${fund.description}, 
            ${fund.category}, ${fund.minInvestment}, ${fund.dailyReturn}, 
            ${fund.duration}, ${fund.progress}, ${fund.projectScale}, ${fund.features}
          )
        `;
      }
      console.log('‚úÖ Sample investment funds created');
    }
    
    console.log('üéâ Database migrations completed successfully!');
    
    // Show current data
    const userCount = await sql`SELECT COUNT(*) as count FROM users`;
    const fundCount = await sql`SELECT COUNT(*) as count FROM investment_funds`;
    const investmentCount = await sql`SELECT COUNT(*) as count FROM investments`;
    
    console.log(`üìä Database Statistics:`);
    console.log(`   üë• Users: ${userCount[0].count}`);
    console.log(`   üí∞ Investment Funds: ${fundCount[0].count}`);
    console.log(`   üìà Investments: ${investmentCount[0].count}`);
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error.message);
    console.error('Full error:', error);
  }
}

runMigrations();
